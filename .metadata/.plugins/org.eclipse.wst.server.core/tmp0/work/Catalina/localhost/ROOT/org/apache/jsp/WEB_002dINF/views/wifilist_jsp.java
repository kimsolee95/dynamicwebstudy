/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.83
 * Generated at: 2022-11-13 11:20:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import dynamicwebpractice.test.openapi.dto.Row;

public final class wifilist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("dynamicwebpractice.test.openapi.dto.Row");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	List<Row> wifiInfoList = (List<Row>) request.getAttribute("wifiInfolist");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("	<meta charset=\"UTF-8\">\r\n");
      out.write("	<title>와이파이 정보 구하기</title>\r\n");
      out.write("	<style>\r\n");
      out.write("		\r\n");
      out.write("		#menu-tab {\r\n");
      out.write("			width: 25%;\r\n");
      out.write("			text-align: center;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		#menu-tab th {\r\n");
      out.write("			padding: 2px;\r\n");
      out.write("		}\r\n");
      out.write("	\r\n");
      out.write("		#mylocation-section {\r\n");
      out.write("			width: 40%;\r\n");
      out.write("		}\r\n");
      out.write("	\r\n");
      out.write("		#wifiinfolist {\r\n");
      out.write("			width: 100%;\r\n");
      out.write("			border-collapse: collapse;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		#wifiinfolist td, #wifiinfolist th {\r\n");
      out.write("			border: 1px solid #ddd;\r\n");
      out.write("			padding: 8px;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		#wifiinfolist th {\r\n");
      out.write("			padding-top: 10px;\r\n");
      out.write("			padding-bottom: 12px;\r\n");
      out.write("			text-align: left;\r\n");
      out.write("			background-color: #04AA6D;\r\n");
      out.write("			color: white;\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		.btnFrm {\r\n");
      out.write("			float: left;\r\n");
      out.write("			margin: 0;\r\n");
      out.write("		}\r\n");
      out.write("	</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	<h1>와이파이 정보 구하기</h1>\r\n");
      out.write("	\r\n");
      out.write("	<table id=\"menu-tab\">\r\n");
      out.write("		<tbody>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th><A href=\"/wfinfo\">홈</A></th>\r\n");
      out.write("				<th><A href=\"/wfinfo-myhistory\">위치 히스토리 목록</A></th>\r\n");
      out.write("				<th><form name=\"frmApi\" id=\"frmApi\" method=\"post\" action=\"callapi\" class=\"btnFrm\">Open API 와이파이 정보 가져오기</form></th>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("	<!-- \r\n");
      out.write("	<p>LAT: <input id=\"myLat\">, LNT: <input id=\"myLnt\"> <button id=\"getMyLocation\">내 위치 가져오기</button>\r\n");
      out.write("	<form name=\"frmGetNearWifi\" id=\"frmGetNearWifi\" method=\"post\" class=\"btnFrm\">\r\n");
      out.write("		<button>근처 WIPI 정보 보기</button>\r\n");
      out.write("		<input type=\"hidden\" name=\"lat\" id =\"lat\" value=\"\" />\r\n");
      out.write("		<input type=\"hidden\" name=\"lnt\" id =\"lnt\" value=\"\" />\r\n");
      out.write("	</form>\r\n");
      out.write("	 </p>\r\n");
      out.write("	  -->\r\n");
      out.write("	  \r\n");
      out.write("	 <table id=\"mylocation-section\">\r\n");
      out.write("	 	<tbody>\r\n");
      out.write("	 		<tr>\r\n");
      out.write("	 			<th>LAT: <input id=\"myLat\">,</th>\r\n");
      out.write("	 			<th>LNT: <input id=\"myLnt\"></th>\r\n");
      out.write("	 			<th><button id=\"getMyLocation\">내 위치 가져오기</button></th>\r\n");
      out.write("	 			<th>\r\n");
      out.write("					<form name=\"frmGetNearWifi\" id=\"frmGetNearWifi\" method=\"post\" class=\"btnFrm\">\r\n");
      out.write("						<button>근처 WIPI 정보 보기</button>\r\n");
      out.write("						<input type=\"hidden\" name=\"lat\" id =\"lat\" value=\"\" />\r\n");
      out.write("						<input type=\"hidden\" name=\"lnt\" id =\"lnt\" value=\"\" />\r\n");
      out.write("					</form>\r\n");
      out.write("	 			</th>\r\n");
      out.write("	 		</tr>\r\n");
      out.write("	 	</tbody>\r\n");
      out.write("	 </table>\r\n");
      out.write("	\r\n");
      out.write("	<table id=\"wifiinfolist\">\r\n");
      out.write("		<tbody>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>거리(Km)</th>\r\n");
      out.write("				<th>관리번호</th>\r\n");
      out.write("				<th>자치구</th>\r\n");
      out.write("				<th>와이파이명</th>\r\n");
      out.write("				<th>도로명주소</th>\r\n");
      out.write("				<th>상세주소</th>\r\n");
      out.write("				<th>설치위치(층)</th>\r\n");
      out.write("				<th>설치유형</th>\r\n");
      out.write("				<th>설치기관</th>\r\n");
      out.write("				<th>서비스구분</th>\r\n");
      out.write("				<th>망종류</th>\r\n");
      out.write("				<th>설치년도</th>\r\n");
      out.write("				<th>실내외구분</th>\r\n");
      out.write("				<th>WIFI접속환경</th>\r\n");
      out.write("				<th>X좌표</th>\r\n");
      out.write("				<th>Y좌표</th>\r\n");
      out.write("				<th>작업일자</th>\r\n");
      out.write("			</tr>\r\n");
      out.write("			");
 if (wifiInfoList == null) { 
      out.write("\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td colspan=\"17\" align=\"center\">위치 정보를 입력한 후 조회해주세요</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			");
 } else { 
      out.write("\r\n");
      out.write("				");
 for (Row row : wifiInfoList) {
      out.write("\r\n");
      out.write("					<tr>\r\n");
      out.write("						<td>");
      out.print(row.getDistance() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiMgrNo() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiWrdofc() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiMainNm() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiAdres1() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiAdres2() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiInstlFloor() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiInstlTy() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiInstlMby() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiSvcSe() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiCmcwr() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiCnstcYear() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiInoutDoor() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getXSwifiRemars3() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getLat() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getLnt() );
      out.write("</td>\r\n");
      out.write("						<td>");
      out.print(row.getWorkDttm() );
      out.write("</td>\r\n");
      out.write("					</tr>\r\n");
      out.write("				");
 } 
      out.write("\r\n");
      out.write("			");
 } 
      out.write("\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("<script>\r\n");
      out.write("	\r\n");
      out.write("	const frmApi = document.getElementById('frmApi'); // API 통신 위한 폼\r\n");
      out.write("	const getMyLocationButton = document.getElementById('getMyLocation'); //내위치 가져오기 버튼\r\n");
      out.write("	const frmGetNearWifi = document.getElementById('frmGetNearWifi'); // 내 위치(위도, 경도)와 가까운 와이파이 정보 찾기 버튼\r\n");
      out.write("	\r\n");
      out.write("	var latitude;\r\n");
      out.write("	var longitude;\r\n");
      out.write("	\r\n");
      out.write("	//WIFI info 전체 저장 요청하기\r\n");
      out.write("	frmApi.addEventListener('click', event => {\r\n");
      out.write("		frmApi.method = \"post\";\r\n");
      out.write("		frmApi.action = \"wfinfo-load\";\r\n");
      out.write("		frmApi.submit();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	//내 위치 좌표 가져오기\r\n");
      out.write("	getMyLocationButton.addEventListener('click', event => {\r\n");
      out.write("		navigator.geolocation.getCurrentPosition(function(pos) {\r\n");
      out.write("		    console.log(pos);\r\n");
      out.write("		    latitude = pos.coords.latitude;\r\n");
      out.write("		    longitude = pos.coords.longitude;\r\n");
      out.write("		    \r\n");
      out.write("		    document.getElementById('myLat').value = latitude;\r\n");
      out.write("		    document.getElementById('myLnt').value = longitude;\r\n");
      out.write("		    \r\n");
      out.write("		});\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	//내 위치와 가까운 와이파이 정보 가져오기\r\n");
      out.write("	frmGetNearWifi.addEventListener('click', event => {\r\n");
      out.write("		\r\n");
      out.write("		//const lat = document.getElementById('myLat').value;\r\n");
      out.write("		//const lnt = document.getElementById('myLnt').value;\r\n");
      out.write("		\r\n");
      out.write("		document.getElementById('lat').value = latitude;\r\n");
      out.write("		document.getElementById('lnt').value = longitude;\r\n");
      out.write("		\r\n");
      out.write("		console.log('확인');\r\n");
      out.write("		console.log(latitude);\r\n");
      out.write("		console.log(longitude);\r\n");
      out.write("		\r\n");
      out.write("		frmGetNearWifi.method = 'post';\r\n");
      out.write("		frmGetNearWifi.action = \"/wfinfo\";\r\n");
      out.write("		frmGetNearWifi.submit();\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
